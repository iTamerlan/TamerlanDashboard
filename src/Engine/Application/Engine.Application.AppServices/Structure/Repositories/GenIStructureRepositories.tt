<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой EngineApp Tamerlan I.V.
//     Изменения в этом файле могут привести к неправильной работе
//     и будут потеряны в случае повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------

using Dashboard.<#= ModelUsing #>.<#= Name1 #><#= ModelUsingS #>;

namespace Dashboard.Application.AppServices.Contexts.<#= Name1 #>.<#= TypeGenMulti #>

{
/// <summary>
/// <#= HelpClass #>
/// </summary>
public interface I<#= Name1 #><#= TypeGen #>
{
    /// <summary>
    /// Возвращает <#= HelpName #> по идентификатору.
    /// </summary>
    /// <param name="id">Идентификатор <#= HelpName2 #>.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель <#= HelpName2 #> <see cref="<#= ModelDomain #>"/></returns>
    Task<<#= ModelDomain #>> GetByIdAsync(Guid id, CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- <#= HelpName2 #>.
    /// </summary>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Список моделей <#= HelpName2 #> <see cref="<#= ModelService #>"/></returns>
    <#= GetTypeList #> GetAllAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- <#= HelpName2 #>, постранично в зависимости от размера страницы и индекса страницы.
    /// </summary>
    /// <param name="id">Идентификатор <#= HelpName2 #>.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <param name="pageSize">Размер страницы.</param>
    /// <param name="pageIndex">Номер страницы.</param>
    /// <returns>Список моделей -- <#= HelpName2 #> <see cref="<#= ModelService #>"/></returns>
    <#= ToComment #><#= GetTypeList #> GetPageAsync(int pageSize, int pageIndex, CancellationToken cancellationToken);

    /// <summary>
    /// Создает <#= HelpName #> по модели.
    /// </summary>
    /// <param name="model">Модель <#= HelpName2 #>.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор созданной сущности</returns>
    Task<Guid> CreateAsync(<#= ModelCreate #> model, CancellationToken cancellationToken);

    /// <summary>
    /// Обновляет(изменяет) <#= HelpName #> по модели.
    /// </summary>
    /// <param name="model">Модель <#= HelpName2 #>.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель <#= HelpName2 #> <see cref="<#= ModelDomain #>"/></returns>
    Task<<#= ModelDomain #>> UpdateAsync(<#= ModelUpdate #> model, CancellationToken cancellationToken);

    /// <summary>
    /// Удаляет <#= HelpName #> по модели.
    /// </summary>
    /// <param name="id">Идентификатор <#= HelpName2 #>.</param>
    /// <param name="model">Модель <#= HelpName2 #>.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор удаленного <#= HelpName2 #></returns>
    Task<Guid> DeleteAsync(<#= ModelDelete #>, CancellationToken cancellationToken);
}
}

<#+ 
    public string Name1 { get; set; } // Post
    public string ModelUsing { get; set; } // Domain OR Contracts
    public string ModelUsingS { get; set; } // ""s"
    public string ModelDomain { get; set; } // Domain.Posts.Post
    public string ModelService { get; set; } // Domain.Posts.Post
    public string ModelCreate { get; set; } // Domain.Posts.Post
    public string ModelUpdate { get; set; } // Domain.Posts.Post
    public string ModelDelete { get; set; } // Domain.Posts.Post
    public string TypeGen { get; set; } // Repository OR Service
    public string TypeGenMulti { get; set; } // Repositories OR Services
    public string GetTypeList { get; set; } // IQueryable<Domain.Posts.Post> OR Task<PostDto[]>

    public string HelpClass { get; set; } // Репозиторий для работы с объявлениями.
    
    public string ToComment { get; set; } // закомментировать

    public string HelpName { get; set; } // Что? Объявление
    public string HelpName2 { get; set; } // Модель чего? Объявления


#>