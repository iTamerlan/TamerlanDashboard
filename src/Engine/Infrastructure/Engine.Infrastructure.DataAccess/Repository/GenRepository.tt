<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой EngineApp Tamerlan I.V.
//     Изменения в этом файле могут привести к неправильной работе
//     и будут потеряны в случае повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------

using Dashboard.Application.AppServices.Contexts.<#= Name1 #>.Repositories;
using Dashboard.Contracts;
using Dashboard.Contracts.<#= Name1 #>;
using Dashboard.Infrastructure.Repository;
using System.Linq.Expressions;
using System;
using Microsoft.EntityFrameworkCore;

namespace Dashboard.Infrastructure.DataAccess.Contexts.<#= Name1 #>.Repositories;

/// <inheritdoc cref="I<#= Name1 #>Repository"/>
public class <#= Name1 #>Repository : I<#= Name1 #>Repository
{
    private readonly IRepository<<#= ModelDomain #>> _repository;

    /// <inheritdoc />
    public <#= Name1 #>Repository(IRepository<<#= ModelDomain #>> repository)
    {
        _repository = repository;
    }

    /// <inheritdoc />
    public async Task<Guid> CreateAsync(<#= ModelDomain #> model, CancellationToken cancellationToken)
    {
        /*await*/ _repository.AddAsync(model);
        return model.Id;
    }

    /// <inheritdoc />
    public Task<<#= ModelDomain #>> GetByIdAsync(Guid id, CancellationToken cancellationToken)
    {
        return _repository.GetByIdAsync(id, cancellationToken);
    }

    /// <inheritdoc />
    public IQueryable<<#= ModelDomain #>> GetAllAsync(CancellationToken cancellationToken)
    {
        return _repository.GetAll();
    }

    /// <inheritdoc />
    public async Task<<#= ModelDomain #>> UpdateAsync(<#= ModelDomain #> model, CancellationToken cancellationToken)
    {
        /*await*/ _repository.UpdateAsync(model);
        return model;
    }

    /// <inheritdoc />
    public async Task<Guid> DeleteAsync(<#= ModelDomain #> model, CancellationToken cancellationToken)
    {
        /*await*/ _repository.DeleteAsync(model);
        return model.Id;
    }
}


<#+ 
    public string Name1 { get; set; } // Post
    public string ModelDomain { get; set; } // Domain.Posts.Post
#>