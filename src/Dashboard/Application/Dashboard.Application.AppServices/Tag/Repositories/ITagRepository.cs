// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой EngineApp Tamerlan I.V.
//     Изменения в этом файле могут привести к неправильной работе
//     и будут потеряны в случае повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------

using Dashboard.Domain.Tags;

namespace Dashboard.Application.AppServices.Contexts.Tag.Repositories

{
/// <summary>
/// Репозиторий для работы с тегами.
/// </summary>
public interface ITagRepository
{
    /// <summary>
    /// Возвращает Тег по идентификатору.
    /// </summary>
    /// <param name="id">Идентификатор Тега.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Тега <see cref="Domain.Tags.Tag"/></returns>
    Task<Domain.Tags.Tag> GetByIdAsync(Guid id, CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Тега.
    /// </summary>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Список моделей Тега <see cref="Domain.Tags.Tag"/></returns>
    IQueryable < Domain.Tags.Tag > GetAllAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Тега, постранично в зависимости от размера страницы и индекса страницы.
    /// </summary>
    /// <param name="id">Идентификатор Тега.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <param name="pageSize">Размер страницы.</param>
    /// <param name="pageIndex">Номер страницы.</param>
    /// <returns>Список моделей -- Тега <see cref="Domain.Tags.Tag"/></returns>
    //IQueryable < Domain.Tags.Tag > GetPageAsync(int pageSize, int pageIndex, CancellationToken cancellationToken);

    /// <summary>
    /// Создает Тег по модели.
    /// </summary>
    /// <param name="model">Модель Тега.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор созданной сущности</returns>
    Task<Guid> CreateAsync(Domain.Tags.Tag model, CancellationToken cancellationToken);

    /// <summary>
    /// Обновляет(изменяет) Тег по модели.
    /// </summary>
    /// <param name="model">Модель Тега.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Тега <see cref="Domain.Tags.Tag"/></returns>
    Task<Domain.Tags.Tag> UpdateAsync(Domain.Tags.Tag model, CancellationToken cancellationToken);

    /// <summary>
    /// Удаляет Тег по модели.
    /// </summary>
    /// <param name="id">Идентификатор Тега.</param>
    /// <param name="model">Модель Тега.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор удаленного Тега</returns>
    Task<Guid> DeleteAsync(Domain.Tags.Tag model, CancellationToken cancellationToken);
}
}

