// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой EngineApp Tamerlan I.V.
//     Изменения в этом файле могут привести к неправильной работе
//     и будут потеряны в случае повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------

using Dashboard.Domain.Historys;

namespace Dashboard.Application.AppServices.Contexts.History.Repositories

{
/// <summary>
/// Репозиторий для работы с историями просмотра.
/// </summary>
public interface IHistoryRepository
{
    /// <summary>
    /// Возвращает История просмотра по идентификатору.
    /// </summary>
    /// <param name="id">Идентификатор Истории просмостра.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Истории просмостра <see cref="Domain.Historys.History"/></returns>
    Task<Domain.Historys.History> GetByIdAsync(Guid id, CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Истории просмостра.
    /// </summary>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Список моделей Истории просмостра <see cref="Domain.Historys.History"/></returns>
    IQueryable < Domain.Historys.History > GetAllAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Истории просмостра, постранично в зависимости от размера страницы и индекса страницы.
    /// </summary>
    /// <param name="id">Идентификатор Истории просмостра.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <param name="pageSize">Размер страницы.</param>
    /// <param name="pageIndex">Номер страницы.</param>
    /// <returns>Список моделей -- Истории просмостра <see cref="Domain.Historys.History"/></returns>
    //IQueryable < Domain.Historys.History > GetPageAsync(int pageSize, int pageIndex, CancellationToken cancellationToken);

    /// <summary>
    /// Создает История просмотра по модели.
    /// </summary>
    /// <param name="model">Модель Истории просмостра.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор созданной сущности</returns>
    Task<Guid> CreateAsync(Domain.Historys.History model, CancellationToken cancellationToken);

    /// <summary>
    /// Обновляет(изменяет) История просмотра по модели.
    /// </summary>
    /// <param name="model">Модель Истории просмостра.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Истории просмостра <see cref="Domain.Historys.History"/></returns>
    Task<Domain.Historys.History> UpdateAsync(Domain.Historys.History model, CancellationToken cancellationToken);

    /// <summary>
    /// Удаляет История просмотра по модели.
    /// </summary>
    /// <param name="id">Идентификатор Истории просмостра.</param>
    /// <param name="model">Модель Истории просмостра.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор удаленного Истории просмостра</returns>
    Task<Guid> DeleteAsync(Domain.Historys.History model, CancellationToken cancellationToken);
}
}

