// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой EngineApp Tamerlan I.V.
//     Изменения в этом файле могут привести к неправильной работе
//     и будут потеряны в случае повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------

using Dashboard.Contracts.User;

namespace Dashboard.Application.AppServices.Contexts.User.Services

{
/// <summary>
/// Сервис работы с пользователями.
/// </summary>
public interface IUserService
{
    /// <summary>
    /// Возвращает Пользователь по идентификатору.
    /// </summary>
    /// <param name="id">Идентификатор Пользователя.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Пользователя <see cref="Domain.Users.User"/></returns>
    Task<Domain.Users.User> GetByIdAsync(Guid id, CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Пользователя.
    /// </summary>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Список моделей Пользователя <see cref="UserDto"/></returns>
    Task<UserDto[]> GetAllAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Возвращает список -- Пользователя, постранично в зависимости от размера страницы и индекса страницы.
    /// </summary>
    /// <param name="id">Идентификатор Пользователя.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <param name="pageSize">Размер страницы.</param>
    /// <param name="pageIndex">Номер страницы.</param>
    /// <returns>Список моделей -- Пользователя <see cref="UserDto"/></returns>
    Task<UserDto[]> GetPageAsync(int pageSize, int pageIndex, CancellationToken cancellationToken);

    /// <summary>
    /// Создает Пользователь по модели.
    /// </summary>
    /// <param name="model">Модель Пользователя.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор созданной сущности</returns>
    Task<Guid> CreateAsync(CreateUserDto model, CancellationToken cancellationToken);

    /// <summary>
    /// Обновляет(изменяет) Пользователь по модели.
    /// </summary>
    /// <param name="model">Модель Пользователя.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Модель Пользователя <see cref="Domain.Users.User"/></returns>
    Task<Domain.Users.User> UpdateAsync(UpdateUserDto model, CancellationToken cancellationToken);

    /// <summary>
    /// Удаляет Пользователь по модели.
    /// </summary>
    /// <param name="id">Идентификатор Пользователя.</param>
    /// <param name="model">Модель Пользователя.</param>
    /// <param name="cancellationToken">Отмена операции.</param>
    /// <returns>Идентификатор удаленного Пользователя</returns>
    Task<Guid> DeleteAsync(Guid id, CancellationToken cancellationToken);
}
}

